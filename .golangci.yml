# Options for analysis running.
run:
  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # If it is explicitly set to 0 (i.e. not the default) then golangci-lint will automatically set the value to match Linux container CPU quota.
  # Default: the number of logical CPUs in the machine
  concurrency: 4
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 2
  # Include test files or not.
  # Default: true
  tests: false
  # List of build tags, all linters use it.
  # Default: []
  build-tags:
    - mytag
  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true
  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: true
  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  # go: "1.22"
# output configuration options
output:
  # The formats used to render issues.
  # Formats:
  # - `colored-line-number`
  # - `line-number`
  # - `json`
  # - `colored-tab`
  # - `tab`
  # - `html`
  # - `checkstyle`
  # - `code-climate`
  # - `junit-xml`
  # - `junit-xml-extended`
  # - `github-actions`
  # - `teamcity`
  # - `sarif`
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  #
  # For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
  # The output can be specified for each of them by separating format name and path by colon symbol.
  # Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
  # The CLI flag (`--out-format`) override the configuration file.
  #
  # Default:
  #   formats:
  #     - format: colored-line-number
  #       path: stdout
  formats:
    - format: colored-line-number
      path: stdout
  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true
  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true
  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true
  # Add a prefix to the output file references.
  # Default: ""
  path-prefix: ""
  # Sort results by the order defined in `sort-order`.
  # Default: false
  sort-results: false
  # Show statistics per linter.
  # Default: false
  show-stats: true

linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - whitespace
    - wsl
    - musttag
    - unused
    - gci
    - importas
    - tagliatelle

linters-settings:
  gci:
    custom-oder: true
    sections:
      - standard
      - default
      - blank
      - dot
      - localmodule
  importas:
    no-extra-aliases: true
    alias:
      - pkg: package_path
        alias: aliswillbe
  unused:
    field-writes-are-uses: false
    post-statements-are-reads: false
    exported-fields-are-used: false
    parameters-are-used: false
    local-variables-are-used: false
    generated-is-used: true
  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: snake
        yaml: camel
        xml: camel
        mapstructure: kebab
        env: upperSnake
        envconfig: upperSnake

issues:
  exclude:
    - "var `_` is unused"
